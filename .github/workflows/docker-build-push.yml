name: Docker Build and Push

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/microservices/proxy/**'
      - 'src/microservices/events/**'
      - 'src/microservices/movies/**'
      - 'src/monolith/**'
      - '.github/workflows/docker-build-push.yml'

  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  MONOLITH_IMAGE_NAME: ${{ github.repository }}/monolith
  MOVIES_SERVICE_IMAGE_NAME: ${{ github.repository }}/movies-service
  EVENTS_SERVICE_IMAGE_NAME: ${{ github.repository }}/events-service
  PROXY_SERVICE_IMAGE_NAME: ${{ github.repository }}/proxy-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Monolith
        id: meta-monolith
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.MONOLITH_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Monolith Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/monolith
          push: true
          tags: ${{ steps.meta-monolith.outputs.tags }}
          labels: ${{ steps.meta-monolith.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata (tags, labels) for Movies Service
        id: meta-movies
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.MOVIES_SERVICE_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Movies Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/movies
          push: true
          tags: ${{ steps.meta-movies.outputs.tags }}
          labels: ${{ steps.meta-movies.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      - name: Extract metadata (tags, labels) for Events Service
        id: meta-events
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.EVENTS_SERVICE_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Events Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/events
          push: true
          tags: ${{ steps.meta-events.outputs.tags }}
          labels: ${{ steps.meta-events.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata (tags, labels) for Proxy Service
        id: meta-proxy
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROXY_SERVICE_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Proxy Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/proxy
          push: true
          tags: ${{ steps.meta-proxy.outputs.tags }}
          labels: ${{ steps.meta-proxy.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version    


      - name: Run API tests (docker-compose up + newman)
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 60  
          cd tests/postman
          npm install
          npm run test:local
        env:
          MONOLITH_URL: http://localhost:8080
          MOVIES_SERVICE_URL: http://localhost:8081
          EVENTS_SERVICE_URL: http://localhost:8082
          PROXY_SERVICE_URL: http://localhost:8000



      